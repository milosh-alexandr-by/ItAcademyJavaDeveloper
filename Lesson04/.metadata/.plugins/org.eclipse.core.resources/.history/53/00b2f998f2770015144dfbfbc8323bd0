/*
 * Класс, в котором объявлются поля автобусов.
 * А также задаются методы, которые выполняют условия задачи.
 */

import java.util.Scanner;

// создадим класс Bus с полями: фамилия водитела, номер автобуса, номер маршрута, марка автобуса, год начала эксплуатации, пробег.
public class Bus {

	private String driverSurname;    // фамилия водитела
	private int busNumber;           // номер автобуса
	private int routeNumber;         // номер маршрута
	private String busBrand;         // марка автобуса
	private int yearBeginUse;        // год начала эксплуатации
	private int mileage;             // пробег

// создадим конструктор с параметрами, которые соответсвуют полям
	Bus(String driverSurname, int busNumber, int routeNumber, String busBrand,
			int yearBeginUse, int mileage) {
		this.driverSurname = driverSurname;     // фамилия водитела
		this.busNumber = busNumber;		        // номер автобуса
		this.routeNumber = routeNumber;         // номер маршрута
		this.busBrand = busBrand;               // марка автобуса
		this.yearBeginUse = yearBeginUse;       // год начал эксплуатации
		this.mileage = mileage;                 // пробег
	}
	
	public String getDriverSurname() {
		return driverSurname;
	}
		
	public int getBusNumber() {
		return busNumber; 
	}
	
	public int getRouteNumber() {
		return routeNumber;
	}
	
	public String getbusBrand() {
		return busBrand;
	}
	
	public int getYearBeginUse() {
		return yearBeginUse;
	}
	
	public int getMileage() {
		return mileage;
	}
	
	public void setDriverSurname(String driverSurname) {
		this.driverSurname = driverSurname;
	}
	
	public void setBusNumber(int busNumber) {
		this.busNumber = busNumber; 
	}
	
	public void setRouteNumber(int routeNumber) {
		this.routeNumber = routeNumber;
	}
	
	public void setbusBrand(String busBrand) {
		this.busBrand = busBrand;
	}
	
	public void setYearBeginUse(int yearBeginUse) {
		this.yearBeginUse = yearBeginUse;
	}
	
	public void setMileage(int mileage) {
		this.mileage = mileage;
	}
	

// метод, который выводит на экран поля класса для каждого конкретного автобуса	
	public void avtobus() {
		System.out.printf("%-15s%-15s%-15s%-15s%-15s%-15s%n", driverSurname,
				busNumber, routeNumber, busBrand, yearBeginUse, mileage);
	}
	
// метод, который выводит на экран массив автобусов
	public static void matrixOfBus(Bus[] mass) {
		// выведем на экран этот массив, воспользовавшись методом avtobus(), который выводит данные одного конкретного автобуса
		System.out.printf("%-2s%-15s%-15s%-15s%-15s%-15s%-15s%n", "№  | ",
				"DriverSurname", "busNumber", "routeNumber", "busBrand",
				"yearBeginUse", "mileage");
		System.out.println("-----------------------------------------------------------------------------------------");
		for (int i = 0; i < mass.length; i++) {
			if (i < 9) {
				System.out.print((i + 1) + "  | ");
				mass[i].avtobus();
			} else {
				System.out.print((i + 1) + " | ");
				mass[i].avtobus();
			}
		}
	}

// метод, который выводит на экран автобусы, соответсвующие выбранному маршруту
	public static void thisRoute(Bus[] massiv) {
		System.out.println();
		System.out.println("Вывести список автобусов для заданного маршрута.");
		System.out.print("Введите номер маршрута: ");
		Scanner sc = new Scanner(System.in);
		Integer x = sc.nextInt();
		System.out.println();
		int numberOfRoute = x;
		System.out.printf("%-2s%-15s%-15s%-15s%-15s%-15s%-15s%n", "№  | ",
				"DriverSurname", "busNumber", "routeNumber", "busBrand",
				"yearBeginUse", "mileage");
		System.out
				.println("-----------------------------------------------------------------------------------------");
		Bus[] arr = new Bus[10];
		for (int i = 0; i < massiv.length; i++) {
			arr[i] = massiv[i];
			if (arr[i].routeNumber == numberOfRoute) {
				if (i < 9) {
					System.out.print((i + 1) + "  | ");
					arr[i].avtobus();
				} else {
					System.out.print((i + 1) + " | ");
					arr[i].avtobus();
				}
			}
		}
	}

// метод, который выводит на экран автобусы, соответсвующие выбранному году эксплуатации
	public static void thisYear(Bus[] massiv1) {
		System.out.println();
		System.out.println("Вывести список автобусов,которые эксплутируются больше заданного срока.");
		System.out.print("Введите год ввода в эксплуатацию: ");
		Scanner sc = new Scanner(System.in);
		Integer y = sc.nextInt();
		System.out.println();
		int yearOfBeginUse = y;
		System.out.printf("%-2s%-15s%-15s%-15s%-15s%-15s%-15s%n", "№  | ",
				"DriverSurname", "busNumber", "routeNumber", "busBrand",
				"yearBeginUse", "mileage");
		System.out
				.println("-----------------------------------------------------------------------------------------");
		Bus[] arr = new Bus[10];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = massiv1[i];
			if (arr[i].yearBeginUse < yearOfBeginUse) {
				if (i < 9) {
					System.out.print((i + 1) + "  | ");
					arr[i].avtobus();
				} else {
					System.out.print((i + 1) + " | ");
					arr[i].avtobus();
				}
			}
		}
	}

// метод, который выводит на экран автобусы, соответсвующие выбранному пробегу	
	public static void thisMileage(Bus[] massiv2) {
		System.out.println();
		System.out.println("Вывести список автобусов, пробег у которых больше заданного расстояния.");
		System.out.print("Введите пробег: ");
		Scanner sc = new Scanner(System.in);
		Integer z = sc.nextInt();
		System.out.println();
		int mileageOf = z;
		System.out.printf("%-2s%-15s%-15s%-15s%-15s%-15s%-15s%n", "№  | ",
				"DriverSurname", "busNumber", "routeNumber", "busBrand",
				"yearBeginUse", "mileage");
		System.out
				.println("-----------------------------------------------------------------------------------------");
		Bus[] arr = new Bus[10];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = massiv2[i];
			if (arr[i].mileage > mileageOf) {
				if (i < 9) {
					System.out.print((i + 1) + "  | ");
					arr[i].avtobus();
				} else {
					System.out.print((i + 1) + " | ");
					arr[i].avtobus();
				}
			}
		}
	}

}
