package car;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;

import mpv.Furgon;
import mpv.Pickup;
import openCar.Cabriolet;
import openCar.Roadster;
import openCar.Targa;
import passengerCar.Coupe;
import passengerCar.Hatchback;
import passengerCar.Hearse;
import passengerCar.Limousine;
import passengerCar.SUV;
import passengerCar.Sedan;
import passengerCar.Universal;
import van.Minibus;
import van.Minivan;

public class TaxiStation {
	
	public static void main(String[] args) throws IOException {
		
		// Создаём список автомобилей таксопарка.
	ArrayList<Car> carList = new ArrayList<>();
	carList = buildTaxiStation();
	
		// Создаём .txt файл со списком автомобилей.
	createNewTxtFile("TaxiStation.txt", carList);
	
		// Вывести на экран стоимость таксопарка.	
	costOfTaxiStation(carList);
		
		// Вывести на экран таксопарк с помощью for each.		
			for (Car ob : carList) {
				System.out.println(ob);
			}
			
			// Сортировка по расходу топлива.	
		sortedByFuelConsumption(carList);
			// Выводим на экран таксопарк, отсортированный по расходу топлива.
		printTaxiStation(carList);
			// Создаём .txt файл со списком автомобилей, отсортированных по расходу топлива.
//		createNewTxtFile("SortedByFuelConsumption.txt", carList);
				
			// Сортировка по цене.		
		Collections.sort(carList, new SortedByPrice() );
			// Выводим на экран таксопарк, отсортированный по цене.
		System.out.println();
		System.out.print("Сортировка по цене:");
		printTaxiStation(carList);
		
	}
	
	// создадим списки, в которых будем хранить все виды машин
		static ArrayList<Furgon> furgonList = new ArrayList<>();
		static ArrayList<Hearse> hearseList = new ArrayList<>();
		static ArrayList<Pickup> pickupList = new ArrayList<>();
		static ArrayList<Cabriolet> cabrioletList = new ArrayList<>();
		static ArrayList<Roadster> roadsterList = new ArrayList<>();
		static ArrayList<Targa> targaList = new ArrayList<>();
		static ArrayList<Coupe> coupeList = new ArrayList<>();
		static ArrayList<Hatchback> hatchbackList = new ArrayList<>();
		static ArrayList<Limousine> limousineList = new ArrayList<>();
		static ArrayList<Sedan> sedanList = new ArrayList<>();
		static ArrayList<SUV> suvList = new ArrayList<>();
		static ArrayList<Universal> universalList = new ArrayList<>();
		static ArrayList<Minibus> minibusList = new ArrayList<>();
		static ArrayList<Minivan> minivanList = new ArrayList<>();
	
	public static ArrayList<Car> buildTaxiStation() {
		ArrayList<Car> arr = new ArrayList<>();
		addCarsToCarList();
		arr.addAll(furgonList);
		arr.addAll(hearseList);
		arr.addAll(pickupList);
		arr.addAll(cabrioletList);
		arr.addAll(roadsterList);
		arr.addAll(targaList);
		arr.addAll(coupeList);
		arr.addAll(hatchbackList);
		arr.addAll(limousineList);
		arr.addAll(sedanList);
		arr.addAll(suvList);
		arr.addAll(universalList);
		arr.addAll(minibusList);
		arr.addAll(minivanList);
		return arr;
	}
	
	public static void addCarsToCarList() {
		sedanList.add(new Sedan("Toyota", "Camry", 8.5, 20000, 170));
		sedanList.add(new Sedan("VW", "Passat B6", 8.1, 11000, 150));
		sedanList.add(new Sedan("Opel", "Astra", 8.1, 8300, 144));
		roadsterList.add(new Roadster("Porsche", "Boxter", 12, 75000, 220));
		universalList.add(new Universal("Ford", "Mondeo", 8.6, 9400, 163));
		universalList.add(new Universal("Mazda", "6", 8.2, 17600, 151));
		minibusList.add(new Minibus("GAZ", "2705", 11.5, 12000, 122));
		
	}
	
	// метод, который создаёт .txt файл, с нужным для нас расположением автомобилей
		public static void createNewTxtFile(String nameOfFile, ArrayList<? extends Car> carList) throws IOException {
			int size = carList.size();
			File taxiStation = new File(nameOfFile);
			taxiStation.createNewFile();
			FileWriter tsw = new FileWriter(taxiStation);
			for (int i=0; i<size; i++) {
				String classOfCar = carList.get(i).getClass().getSimpleName();
				String strCar = carList.get(i).toString() + ", " + classOfCar + "\n";
				tsw.write(strCar);
			}
			tsw.flush();
			tsw.close();
		}
		
		// метод, который подсичтывает стоимость таксопарка
		public static void costOfTaxiStation(Collection<Car> arr) {
			int priceOfTaxiStation = 0;
			Iterator<Car> itr = arr.iterator();
			while (itr.hasNext()) {
				priceOfTaxiStation += itr.next().getPrice();
			}
			System.out.println("Стоимость автопарка: " + priceOfTaxiStation + " долларов.\n");
		}
		
		// метод для сортровоки по расходу топлива
		public static void sortedByFuelConsumption(ArrayList<? extends Car> arr) {
			System.out.println();
			System.out.print("Сортировка по расходу топлива:");
			Collections.sort(arr, 				
					new Comparator<Car>() {			
					@Override
					public int compare(Car obj1, Car obj2) {
						double fc1 = obj1.getFuelConsumption();
						double fc2 = obj2.getFuelConsumption();
						if (fc1>fc2) {
							return 1;
						}
						else if (fc1<fc2) {
							return -1;
						}
						else {
							return 0;
						}
					}
					}	
			);	
		}
		
		// метод, который выводит на экран таксопарк
		public static void printTaxiStation(ArrayList<Car> arr){
			System.out.println();
		     Iterator<Car> itr = arr.iterator();
		      while(itr.hasNext()) {
		         Object element = itr.next();
		         System.out.println(element);
		      }
		}	
	

}
